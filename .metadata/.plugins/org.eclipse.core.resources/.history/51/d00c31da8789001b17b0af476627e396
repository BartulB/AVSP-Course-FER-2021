package lab1;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Map;
import java.util.Set;

public class TaskB {
	
	private static int N;
	private static int Q;
	private static int I;
	private static int K;
	private static String[] hashes;
	private static Map<Integer, Set<Integer>> candidates;
	private static int b = 8;
	private static int r = 16;

	public static void main(String[] args) {
		
		//try(BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))){

        try (BufferedReader reader = new BufferedReader(new FileReader("C:/Users/bartu/Downloads/lab1A_primjer/test2/R.in"))) {
			
			N = Integer.parseInt(reader.readLine());
			hashes = new String[N];
			
			for (int i=0; i<N; i++) {
				
				hashes[i] = Main.simhash(reader.readLine());
			}
			
			Q = Integer.parseInt(reader.readLine());
			
			String line;
			String[] lineArray;
			
			while ((line = reader.readLine()) != null) {
				
				if(line.isEmpty()) break;
				
				lineArray = line.split(" ");
				
				I = Integer.parseInt(lineArray[0]);
				
				K = Integer.parseInt(lineArray[1]);
				
				//int numberOfSimilar = getNumberOfSimilar(I, K);
				
				//System.out.println(numberOfSimilar);
			}
		} 
		catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private static Map<Integer, Set<Integer>> algorithmLSH(String[] hashes){
		
		for (int i=1; i<=b; i++ ) {
			
			for (int j=0; j<N; j++) {
				
				String hash = hashes[j];
				
				int val = hashToint(i, hash);
			}
		}
		
		return candidates;
	}

	private static int hashToint(int band, String hash) {
		
		int lowerBoundary = 0 + band*r;
		
		int upperBoundary = lowerBoundary + (r - 1);
		
		hash = hash.substring(lowerBoundary, upperBoundary);
		
		return 0;
	}

}
